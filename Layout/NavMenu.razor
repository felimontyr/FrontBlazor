@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="nav-menu-wrapper">
    <ul class="nav flex-column">
        @if (usuarioEmail != null)
        {
            @foreach (var ruta in rutas)
            {
                var texto = nombresRutas.ContainsKey(ruta) ? nombresRutas[ruta] : ruta;
                <li class="nav-item">
                    <NavLink class="nav-link" href="@ruta">@texto</NavLink>
                </li>
            }

            <li class="nav-item mt-3">
                <NavLink class="nav-link text-danger" href="/logout">Cerrar sesión</NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private List<string> rutas = new();
    private string? usuarioEmail;

    private Dictionary<string, string> nombresRutas = new()
    {
        ["/Actor"] = "Actores",
        ["/Articulo"] = "Artículos",
        ["/Frecuencia"] = "Frecuencia",
        ["/Fuente"] = "Fuente",
        ["/fuentesporindicador"] = "Fuentes por Indicador",
        ["/indicador"] = "Indicadores",
        ["/literal"] = "Literal",
        ["/numeral"] = "Numeral",
        ["/paragrafo"] = "Parágrafo",
        ["/RepresenVisual"] = "Representación Visual",
        ["/represenvisualporindicador"] = "Represen visual por Indicador",
        ["/responsablesporindicador"] = "Responsables indicador",
        ["/resultadoindicador"] = "Resultados indicador",
        ["/Rol"] = "Roles",
        ["/rolusuario"] = "Roles por Usuario",
        ["/Sentido"] = "Sentido",
        ["/tipoactor"] = "Tipo de Actor",
        ["/tipoindicador"] = "Tipo de Indicador",
        ["/unidadmedicion"] = "Unidad de Medición",
        ["/usuario"] = "Usuarios",
        ["/Variable"] = "Variable",
        ["/variablesporindicador"] = "Variables por Indicador"
    };

    protected override async Task OnInitializedAsync()
    {
        usuarioEmail = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "usuarioEmail");

        if (!string.IsNullOrEmpty(usuarioEmail))
        {
            rutas = await JSRuntime.InvokeAsync<List<string>>("eval", @"
                Object.keys(sessionStorage)
                      .filter(k => k.startsWith('ruta_'))
                      .map(k => sessionStorage.getItem(k))");
        }
    }
}