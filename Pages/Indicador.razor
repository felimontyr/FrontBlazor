@page "/indicador"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JSRuntime
@inherits ValidacionAcceso
@using FrontBlazor.Components

<h3>Gestión de Indicadores</h3>

@if (!datosCargados)
{
    <p class="text-muted">Cargando información...</p>
}
else if (!string.IsNullOrEmpty(errorMensaje))
{
    <div class="alert alert-danger">@errorMensaje</div>
}
else
{
    <VerificarPermiso Accion="crear" Ruta="/indicador">
        <div class="mb-3 row g-2">
            <div class="col"><input @bind="nuevoCodigo" class="form-control" placeholder="Código" /></div>
            <div class="col"><input @bind="nuevoNombre" class="form-control" placeholder="Nombre" /></div>
            <div class="col"><input @bind="nuevoMeta" class="form-control" placeholder="Meta" /></div>
            <div class="col"><textarea @bind="nuevoObjetivo" class="form-control" placeholder="Objetivo"></textarea></div>
            <div class="col"><textarea @bind="nuevoAlcance" class="form-control" placeholder="Alcance"></textarea></div>
            <div class="col"><textarea @bind="nuevoFormula" class="form-control" placeholder="Fórmula"></textarea></div>

            <div class="col">
                <select @bind="nuevoTipoIndicador" class="form-select">
                    <option value="">Tipo</option>
                    @foreach (var tipo in tiposIndicador)
                    {
                        <option value="@tipo["id"]">@tipo["nombre"]</option>
                    }
                </select>
            </div>
            <div class="col">
                <select @bind="nuevaUnidadMedicion" class="form-select">
                    <option value="">Unidad</option>
                    @foreach (var unidad in unidadesMedicion)
                    {
                        <option value="@unidad["id"]">@unidad["descripcion"]</option>
                    }
                </select>
            </div>
            <div class="col">
                <select @bind="nuevoSentido" class="form-select">
                    <option value="">Sentido</option>
                    @foreach (var sentido in sentidos)
                    {
                        <option value="@sentido["id"]">@sentido["nombre"]</option>
                    }
                </select>
            </div>
            <div class="col">
                <select @bind="nuevaFrecuencia" class="form-select">
                    <option value="">Frecuencia</option>
                    @foreach (var frecuencia in frecuencias)
                    {
                        <option value="@frecuencia["id"]">@frecuencia["nombre"]</option>
                    }
                </select>
            </div>
            <div class="col">
                <select @bind="nuevoArticulo" class="form-select">
                    <option value="">Artículo</option>
                    @foreach (var articulo in articulos)
                    {
                        <option value="@articulo["id"]">@articulo["nombre"]</option>
                    }
                </select>
            </div>
            <div class="col">
                <select @bind="nuevoLiteral" class="form-select">
                    <option value="">Literal</option>
                    @foreach (var literal in literales)
                    {
                        <option value="@literal["id"]">@literal["descripcion"]</option>
                    }
                </select>
            </div>
            <div class="col">
                <select @bind="nuevoNumeral" class="form-select">
                    <option value="">Numeral</option>
                    @foreach (var numeral in numerales)
                    {
                        <option value="@numeral["id"]">@numeral["descripcion"]</option>
                    }
                </select>
            </div>
            <div class="col">
                <select @bind="nuevoParagrafo" class="form-select">
                    <option value="">Parágrafo</option>
                    @foreach (var paragrafo in parrafos)
                    {
                        <option value="@paragrafo["id"]">@paragrafo["descripcion"]</option>
                    }
                </select>
            </div>
            <div class="col">
                <button class="btn btn-success w-100" @onclick="CrearIndicador">Crear</button>
            </div>
        </div>
    </VerificarPermiso>

    @if (indicadores.Count == 0)
    {
        <p>No hay indicadores registrados.</p>
    }
    else
    {
        <table class="table table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Código</th>
                    <th>Nombre</th>
                    <th>Meta</th>
                    <th>Objetivo</th>
                    <th>Alcance</th>
                    <th>Fórmula</th>
                    <th>Tipo</th>
                    <th>Unidad</th>
                    <th>Sentido</th>
                    <th>Frecuencia</th>
                    <th>Artículo</th>
                    <th>Literal</th>
                    <th>Numeral</th>
                    <th>Parágrafo</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var indicador in indicadores)
                {
                    <tr>
                       @if (indicadorEditarId == indicador["id"].ToString())
                    {
                        <td><input class="form-control" @bind="indicadorEditarCodigo" /></td>
                        <td><input class="form-control" @bind="indicadorEditarNombre" /></td>
                        <td><input class="form-control" @bind="indicadorEditarMeta" /></td>
                        <td><textarea class="form-control" @bind="indicadorEditarObjetivo"></textarea></td>
                        <td><textarea class="form-control" @bind="indicadorEditarAlcance"></textarea></td>
                        <td><textarea class="form-control" @bind="indicadorEditarFormula"></textarea></td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarTipo">
                                <option value="">Tipo</option>
                                @foreach (var tipo in tiposIndicador)
                                {
                                    <option value="@tipo["id"]">@tipo["nombre"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarUnidad">
                                <option value="">Unidad</option>
                                @foreach (var unidad in unidadesMedicion)
                                {
                                    <option value="@unidad["id"]">@unidad["descripcion"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarSentido">
                                <option value="">Sentido</option>
                                @foreach (var sentido in sentidos)
                                {
                                    <option value="@sentido["id"]">@sentido["nombre"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarFrecuencia">
                                <option value="">Frecuencia</option>
                                @foreach (var frecuencia in frecuencias)
                                {
                                    <option value="@frecuencia["id"]">@frecuencia["nombre"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarArticulo">
                                <option value="">Artículo</option>
                                @foreach (var articulo in articulos)
                                {
                                    <option value="@articulo["id"]">@articulo["nombre"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarLiteral">
                                <option value="">Literal</option>
                                @foreach (var literal in literales)
                                {
                                    <option value="@literal["id"]">@literal["descripcion"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarNumeral">
                                <option value="">Numeral</option>
                                @foreach (var numeral in numerales)
                                {
                                    <option value="@numeral["id"]">@numeral["descripcion"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarParagrafo">
                                <option value="">Parágrafo</option>
                                @foreach (var paragrafo in parrafos)
                                {
                                    <option value="@paragrafo["id"]">@paragrafo["descripcion"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-success" @onclick="GuardarEdicion">Guardar</button>
                            <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
                        </td>
                    }
                    else
                    {
                        <td>@indicador["codigo"]</td>
                        <td>@indicador["nombre"]</td>
                        <td>@indicador["meta"]</td>
                        <td>@indicador["objetivo"]</td>
                        <td>@indicador["alcance"]</td>
                        <td>@indicador["formula"]</td>
                        <td>@BuscarNombre(tiposIndicador, indicador["fkidtipoindicador"])</td>
                        <td>@BuscarDescripcion(unidadesMedicion, indicador["fkidunidadmedicion"])</td>
                        <td>@BuscarNombre(sentidos, indicador["fkidsentido"])</td>
                        <td>@BuscarNombre(frecuencias, indicador["fkidfrecuencia"])</td>
                        <td>@(BuscarNombre(articulos, indicador["fkidarticulo"]) ?? indicador["fkidarticulo"])</td>
                        <td>@BuscarDescripcion(literales, indicador["fkidliteral"])</td>
                        <td>@BuscarDescripcion(numerales, indicador["fkidnumeral"])</td>
                        <td>@BuscarDescripcion(parrafos, indicador["fkidparagrafo"])</td>
                        <td>
                            <div class="btn-group">
                                <VerificarPermiso Accion="editar" Ruta="/indicador">
                                    <button class="btn btn-sm btn-primary" @onclick="() => IniciarEdicion(indicador)">
                                        Editar
                                    </button>
                                </VerificarPermiso>
                                
                                <VerificarPermiso Accion="eliminar" Ruta="/indicador">
                                    <button class="btn btn-sm btn-danger" @onclick="() => EliminarIndicador(indicador)">
                                        Eliminar
                                    </button>
                                </VerificarPermiso>

                                <VerificarPermiso Accion="editar" Ruta="/indicador">
                                    <button class="btn btn-sm btn-info" @onclick="() => AbrirModalResponsables(indicador)">
                                        Asignar Responsables
                                    </button>
                                    <button class="btn btn-sm btn-secondary" @onclick="() => AbrirModalRepresenVisualPorIndicador(indicador)">
                                        Asignar Rep. Visuales
                                    </button>
                                    <button class="btn btn-sm btn-info" @onclick="() => AbrirModalFuentesPorIndicador(indicador)">
                                        Asignar Fuentes
                                    </button>
                                </VerificarPermiso>
                            </div>
                        </td>
                    }
                    </tr>
                }
            </tbody>
        </table>
    }
}

<!-- Modal para gestionar responsables por indicador -->
@if (mostrarModalResponsables)
{
    <VerificarPermiso Accion="editar" Ruta="/indicador">
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Responsables para Indicador: @(indicadorSeleccionado != null ? indicadorSeleccionado["nombre"] : "")</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModalResponsables"></button>
                    </div>
                    <div class="modal-body">
                        @if (!string.IsNullOrEmpty(mensajeModal))
                        {
                            <div class="alert alert-info">@mensajeModal</div>
                        }

                        <div class="mb-3">
                            <label>Responsable (Actor):</label>
                            <select class="form-select mb-2" @bind="nuevoResponsable">
                                <option value="">Seleccione un actor</option>
                                @foreach (var actor in actores)
                                {
                                    <option value="@actor["id"]">@actor["nombre"]</option>
                            }
                            </select>

                            <label>Fecha Asignación:</label>
                            <input type="date" class="form-control mb-3" @bind="nuevaFechaAsignacion" />

                            <button class="btn btn-success" @onclick="CrearRelacion">Asignar</button>
                        </div>

                        <h4>Relaciones actuales</h4>
                        @if (relaciones.Count == 0)
                        {
                            <p>No hay responsables asignados a este indicador.</p>
                        }
                        else
                        {
                            <ul class="list-group">
                                @foreach (var relacion in relaciones)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>
                                            Actor: @actores.FirstOrDefault(a => a["id"].ToString() == relacion["fkidresponsable"].ToString())?["nombre"]
                                            - Fecha: @FormatFecha(relacion["fechaasignacion"])
                                        </span>
                                        <span>
                                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarRelacion(relacion)">Eliminar</button>
                                        </span>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalResponsables">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
    </VerificarPermiso>
}

<!-- Modal para gestionar representaciones visuales por indicador -->
@if (mostrarModalRepresenVisualPorIndicador)
{
    <VerificarPermiso Accion="editar" Ruta="/indicador">
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Representaciones Visuales para Indicador: @(indicadorSeleccionado != null ? indicadorSeleccionado["nombre"] : "")</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModalRepresenVisualPorIndicador"></button>
                    </div>
                    <div class="modal-body">
                        @if (!string.IsNullOrEmpty(mensajeModalRepresenVisualPorIndicador))
                        {
                            <div class="alert alert-info">@mensajeModalRepresenVisualPorIndicador</div>
                        }

                        <div class="mb-3">
                            <label>Representación Visual:</label>
                            <select class="form-select mb-2" @bind="nuevoIdRepresenVisualPorIndicador">
                                <option value="">Seleccione una representación visual</option>
                                @foreach (var rep in represenvisuales)
                                {
                                    <option value="@rep["id"]">@rep["nombre"]</option>
                            }
                            </select>

                            <button class="btn btn-success" @onclick="AsignarRepresenVisualPorIndicador">Asignar</button>
                        </div>

                        <h4 class="mt-4">Relaciones existentes</h4>
                        @if (relacionesRepresenVisual.Count == 0)
                        {
                            <p>No hay relaciones registradas para este indicador.</p>
                        }
                        else
                        {
                            <ul class="list-group">
                                @foreach (var relacion in relacionesRepresenVisual)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>
                                            @represenvisuales.FirstOrDefault(r => r["id"].ToString() == relacion["fkidrepresenvisual"].ToString())?["nombre"]
                                        </span>
                                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarRepresenVisualPorIndicador(relacion)">Eliminar</button>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalRepresenVisualPorIndicador">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
    </VerificarPermiso>
}
<!-- Modal para gestionar fuentes por indicador -->
@if (mostrarModalFuentesPorIndicador)
{
    <VerificarPermiso Accion="editar" Ruta="/indicador">
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Fuentes para Indicador: @(indicadorSeleccionado != null ? indicadorSeleccionado["nombre"] : "")</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModalFuentesPorIndicador"></button>
                    </div>
                    <div class="modal-body">
                        @if (!string.IsNullOrEmpty(mensajeModalFuentesPorIndicador))
                        {
                            <div class="alert alert-info">@mensajeModalFuentesPorIndicador</div>
                        }

                        <div class="mb-3">
                            <label>Fuente:</label>
                            <select class="form-select mb-2" @bind="nuevoIdFuente">
                                <option value="">Seleccione una fuente</option>
                                @foreach (var fuente in fuentes)
                                {
                                    <option value="@fuente["id"]">@fuente["nombre"]</option>
                            }
                            </select>

                            <button class="btn btn-success" @onclick="AsignarFuentePorIndicador">Asignar</button>
                        </div>

                        <h4 class="mt-4">Fuentes asignadas</h4>
                        @if (relacionesFuentes.Count == 0)
                        {
                            <p>No hay fuentes asignadas a este indicador.</p>
                        }
                        else
                        {
                            <ul class="list-group">
                                @foreach (var relacion in relacionesFuentes)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>
                                            @fuentes.FirstOrDefault(f => f["id"].ToString() == relacion["fkidfuente"].ToString())?["nombre"]
                                        </span>
                                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarFuentePorIndicador(relacion)">Eliminar</button>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalFuentesPorIndicador">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
    </VerificarPermiso>
}

@code {
    private const string PROYECTO = "proyecto";
    private const string TABLA = "indicador";
    private const string TABLA_RESPONSABLES = "responsablesporindicador";

    private List<Dictionary<string, object>> indicadores = new();
    private List<Dictionary<string, object>> tiposIndicador = new();
    private List<Dictionary<string, object>> unidadesMedicion = new();
    private List<Dictionary<string, object>> sentidos = new();
    private List<Dictionary<string, object>> frecuencias = new();
    private List<Dictionary<string, object>> articulos = new();
    private List<Dictionary<string, object>> literales = new();
    private List<Dictionary<string, object>> numerales = new();
    private List<Dictionary<string, object>> parrafos = new();
    private List<Dictionary<string, object>> actores = new();
    private List<Dictionary<string, object>> relaciones = new();

    private string nuevoCodigo = "";
    private string nuevoNombre = "";
    private string nuevoMeta = "";
    private string nuevoObjetivo = "";
    private string nuevoAlcance = "";
    private string nuevoFormula = "";
    private string nuevoTipoIndicador = "";
    private string nuevaUnidadMedicion = "";
    private string nuevoSentido = "";
    private string nuevaFrecuencia = "";
    private string nuevoArticulo = "";
    private string nuevoLiteral = "";
    private string nuevoNumeral = "";
    private string nuevoParagrafo = "";
    private string indicadorEditarId = "";
    private string indicadorEditarCodigo = "";
    private string indicadorEditarNombre = "";
    private string indicadorEditarMeta = "";
    private string indicadorEditarObjetivo = "";
    private string indicadorEditarAlcance = "";
    private string indicadorEditarFormula = "";
    private string indicadorEditarTipo = "";
    private string indicadorEditarUnidad = "";
    private string indicadorEditarSentido = "";
    private string indicadorEditarFrecuencia = "";
    private string indicadorEditarArticulo = "";
    private string indicadorEditarLiteral = "";
    private string indicadorEditarNumeral = "";
    private string indicadorEditarParagrafo = "";

    // Variables para el modal de responsables
    private bool mostrarModalResponsables = false;
    private Dictionary<string, object>? indicadorSeleccionado = null;
    private string nuevoResponsable = string.Empty;
    private DateTime nuevaFechaAsignacion = DateTime.Today;
    private string mensajeModal = string.Empty;
    private Dictionary<string, object>? editandoRelacion = null;
    private DateTime nuevaFechaEdicion = DateTime.Today;

     private string mensaje = string.Empty;

    private string? errorMensaje;
    private bool datosCargados = false;

   //Variables de Representación Visual
 private const string TABLA_REPRESENVISUAL_INDICADOR = "represenvisualporindicador";
private bool mostrarModalRepresenVisualPorIndicador = false;
private List<Dictionary<string, object>> represenvisuales = new();
private List<Dictionary<string, object>> relacionesRepresenVisual = new();
private string nuevoIdRepresenVisualPorIndicador = string.Empty;
private string mensajeModalRepresenVisualPorIndicador = string.Empty;

    // Variables for Fuentes modal
private const string TABLA_FUENTES_INDICADOR = "fuentesporindicador";
private bool mostrarModalFuentesPorIndicador = false;
private List<Dictionary<string, object>> fuentes = new();
private List<Dictionary<string, object>> relacionesFuentes = new();
private string nuevoIdFuente = string.Empty;
private string mensajeModalFuentesPorIndicador = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
    }

    private async Task CargarDatosIniciales()
    {
        try
        {
            await CargarTabla("tipoindicador", tiposIndicador);
            await CargarTabla("unidadmedicion", unidadesMedicion);
            await CargarTabla("sentido", sentidos);
            await CargarTabla("frecuencia", frecuencias);
            await CargarTabla("articulo", articulos);
            await CargarTabla("literal", literales);
            await CargarTabla("numeral", numerales);
            await CargarTabla("paragrafo", parrafos);
            await CargarTabla("actor", actores);
            await ObtenerIndicadores();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar datos: {ex.Message}";
        }

        datosCargados = true;
    }

    private async Task CargarTabla(string nombreTabla, List<Dictionary<string, object>> lista)
    {
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, nombreTabla);
            if (resultado != null)
            {
                lista.Clear();
                lista.AddRange(resultado);
                await JSRuntime.InvokeVoidAsync("console.log", $"{nombreTabla} desde API:", JsonSerializer.Serialize(resultado));
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error en tabla {nombreTabla}: {ex.Message}";
        }
    }

    private async Task ObtenerIndicadores()
    {
        var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
        indicadores = resultado ?? new();
        await JSRuntime.InvokeVoidAsync("console.log", "Indicadores cargados:", JsonSerializer.Serialize(indicadores));
    }

    private string BuscarNombre(List<Dictionary<string, object>> lista, object? id)
    {
        var sid = id?.ToString();
        return lista.FirstOrDefault(e => e["id"]?.ToString() == sid)?["nombre"]?.ToString() ?? "N/A";
    }

    private string BuscarDescripcion(List<Dictionary<string, object>> lista, object? id)
    {
        return lista.FirstOrDefault(e => e["id"].ToString() == id?.ToString())?["descripcion"]?.ToString() ?? "N/A";
    }

    private async Task CrearIndicador()
    {
        var nuevo = new Dictionary<string, object>
        {
            { "codigo", nuevoCodigo },
            { "nombre", nuevoNombre },
            { "meta", nuevoMeta },
            { "objetivo", nuevoObjetivo },
            { "alcance", nuevoAlcance },
            { "formula", nuevoFormula },
            { "fkidtipoindicador", nuevoTipoIndicador },
            { "fkidunidadmedicion", nuevaUnidadMedicion },
            { "fkidsentido", nuevoSentido },
            { "fkidfrecuencia", nuevaFrecuencia },
            { "fkidarticulo", nuevoArticulo },
            { "fkidliteral", nuevoLiteral },
            { "fkidnumeral", nuevoNumeral },
            { "fkidparagrafo", nuevoParagrafo }
        };

        var creado = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevo);
        if (creado)
        {
            await ObtenerIndicadores();
            LimpiarFormulario();
        }
        else
        {
            errorMensaje = "Error al crear el indicador.";
        }
    }

    private void IniciarEdicion(Dictionary<string, object> indicador)
    {
        indicadorEditarId = indicador["id"].ToString();
        indicadorEditarCodigo = indicador["codigo"]?.ToString() ?? "";
        indicadorEditarNombre = indicador["nombre"]?.ToString() ?? "";
        indicadorEditarMeta = indicador["meta"]?.ToString() ?? "";
        indicadorEditarObjetivo = indicador["objetivo"]?.ToString() ?? "";
        indicadorEditarAlcance = indicador["alcance"]?.ToString() ?? "";
        indicadorEditarFormula = indicador["formula"]?.ToString() ?? "";
        indicadorEditarTipo = indicador["fkidtipoindicador"]?.ToString() ?? "";
        indicadorEditarUnidad = indicador["fkidunidadmedicion"]?.ToString() ?? "";
        indicadorEditarSentido = indicador["fkidsentido"]?.ToString() ?? "";
        indicadorEditarFrecuencia = indicador["fkidfrecuencia"]?.ToString() ?? "";
        indicadorEditarArticulo = indicador["fkidarticulo"]?.ToString() ?? "";
        indicadorEditarLiteral = indicador["fkidliteral"]?.ToString() ?? "";
        indicadorEditarNumeral = indicador["fkidnumeral"]?.ToString() ?? "";
        indicadorEditarParagrafo = indicador["fkidparagrafo"]?.ToString() ?? "";
    }

    private void CancelarEdicion()
    {
        indicadorEditarId = "";
    }

    private async Task GuardarEdicion()
    {
        if (string.IsNullOrEmpty(indicadorEditarId)) return;

        var datosActualizados = new Dictionary<string, object>
        {
            { "codigo", indicadorEditarCodigo },
            { "nombre", indicadorEditarNombre },
            { "meta", indicadorEditarMeta },
            { "objetivo", indicadorEditarObjetivo },
            { "alcance", indicadorEditarAlcance },
            { "formula", indicadorEditarFormula },
            { "fkidtipoindicador", indicadorEditarTipo },
            { "fkidunidadmedicion", indicadorEditarUnidad },
            { "fkidsentido", indicadorEditarSentido },
            { "fkidfrecuencia", indicadorEditarFrecuencia },
            { "fkidarticulo", indicadorEditarArticulo },
            { "fkidliteral", indicadorEditarLiteral },
            { "fkidnumeral", indicadorEditarNumeral },
            { "fkidparagrafo", indicadorEditarParagrafo }
        };

        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Actualizando:", JsonSerializer.Serialize(datosActualizados));

            var resultado = await servicioEntidad.ActualizarAsync(
                PROYECTO,
                TABLA,
                "id",
                indicadorEditarId,
                datosActualizados
            );

            if (resultado)
            {
                indicadorEditarId = "";
                await ObtenerIndicadores();
            }
            else
            {
                errorMensaje = "Error al actualizar el indicador.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error crítico al guardar: {ex.Message}";
        }
    }

    private void LimpiarFormulario()
    {
        nuevoCodigo = "";
        nuevoNombre = "";
        nuevoMeta = "";
        nuevoObjetivo = "";
        nuevoAlcance = "";
        nuevoFormula = "";
        nuevoTipoIndicador = "";
        nuevaUnidadMedicion = "";
        nuevoSentido = "";
        nuevaFrecuencia = "";
        nuevoArticulo = "";
        nuevoLiteral = "";
        nuevoNumeral = "";
        nuevoParagrafo = "";
    }

    private async Task EliminarIndicador(Dictionary<string, object> indicador)
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Está seguro de eliminar el indicador '{indicador["nombre"]}'?");
        if (!confirmar) return;

        bool resultado = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", indicador["id"].ToString());

        if (resultado)
        {
            await ObtenerIndicadores();
        }
        else
        {
            errorMensaje = "Error al eliminar el indicador.";
        }
    }

    private async Task AbrirModalResponsables(Dictionary<string, object> indicador)
    {
        indicadorSeleccionado = indicador;
        mostrarModalResponsables = true;
        mensajeModal = "";
        nuevoResponsable = "";
        nuevaFechaAsignacion = DateTime.Today;
        editandoRelacion = null;
        
        // Cargar relaciones para este indicador
        await ObtenerRelacionesPorIndicador(indicador["id"].ToString());
    }

    private void CerrarModalResponsables()
    {
        mostrarModalResponsables = false;
        indicadorSeleccionado = null;
        relaciones.Clear();
    }

    private async Task ObtenerRelacionesPorIndicador(string indicadorId)
    {
        try {
            var todasLasRelaciones = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA_RESPONSABLES) ?? new();
            relaciones = todasLasRelaciones
                .Where(r => r["fkidindicador"].ToString() == indicadorId)
                .ToList();
        }
        catch (Exception ex) {
            mensajeModal = $"Error al cargar responsables: {ex.Message}";
        }
    }

    private string FormatFecha(object? fecha)
    {
        if (fecha is DateTime dt)
            return dt.ToString("yyyy-MM-dd");

        if (DateTime.TryParse(fecha?.ToString(), out var parsed))
            return parsed.ToString("yyyy-MM-dd");

        return "Fecha inválida";
    }

  private async Task CrearRelacion()
{
    mensajeModal = string.Empty;

    if (string.IsNullOrWhiteSpace(nuevoResponsable) || indicadorSeleccionado == null)
    {
        mensajeModal = "Debe seleccionar un actor.";
        return;
    }

    string indicadorId = indicadorSeleccionado["id"].ToString();

    if (relaciones.Any(r =>
        r["fkidresponsable"].ToString() == nuevoResponsable &&
        r["fkidindicador"].ToString() == indicadorId))
    {
        mensajeModal = "La relación ya existe.";
        return;
    }

    try
    {
        var nuevaRelacion = new Dictionary<string, object>
        {
            { "fkidresponsable", nuevoResponsable },
            { "fkidindicador", indicadorId },
            { "fechaasignacion", nuevaFechaAsignacion.ToString("yyyy-MM-dd") }
        };

        var resultado = await servicioEntidad.CrearAsync(PROYECTO, TABLA_RESPONSABLES, nuevaRelacion);

        if (resultado)
        {
            mensajeModal = "Responsable asignado correctamente.";
            nuevoResponsable = string.Empty;
            nuevaFechaAsignacion = DateTime.Today;
            await ObtenerRelacionesPorIndicador(indicadorId);
        }
        else
        {
            mensajeModal = "Error al crear la relación.";
        }
    }
    catch (Exception ex)
    {
        mensajeModal = $"Error crítico: {ex.Message}";
    }
}

 private async Task EliminarRelacion(Dictionary<string, object> relacion)
{
    bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm",
        $"¿Deseas eliminar la relación de {relacion["fkidresponsable"]} con indicador {relacion["fkidindicador"]}?");

    if (!confirmar) return;

    try 
    {
        var parametros = new Dictionary<string, object>
        {
            { "fkidresponsable", relacion["fkidresponsable"] },
            { "fkidindicador", relacion["fkidindicador"] }
        };

        // Cambiado: Usar TABLA_RESPONSABLES en lugar de TABLA
        var resultado = await servicioEntidad.EjecutarProcedimientoAsync(
            PROYECTO, 
            TABLA_RESPONSABLES, 
            "sp_eliminar_responsablesporindicador", 
            parametros
        );

        if (resultado != null)
        {
            mensajeModal = "Relación eliminada correctamente.";
            await ObtenerRelacionesPorIndicador(relacion["fkidindicador"].ToString());
        }
        else
        {
            mensajeModal = "Error al eliminar la relación.";
        }
    }
    catch (Exception ex)
    {
        mensajeModal = $"Error al eliminar la relación: {ex.Message}";
        await JSRuntime.InvokeVoidAsync("console.error", "Error al eliminar relación:", ex.Message);
    }
}

//metodos para la representación visual
private async Task AbrirModalRepresenVisualPorIndicador(Dictionary<string, object> indicador)
{
    indicadorSeleccionado = indicador;
    mostrarModalRepresenVisualPorIndicador = true;
    mensajeModalRepresenVisualPorIndicador = "";
    nuevoIdRepresenVisualPorIndicador = "";
    
    try
    {
        represenvisuales = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "represenvisual") ?? new();
        await ObtenerRelacionesRepresenVisual(indicador["id"].ToString());
    }
    catch (Exception ex)
    {
        mensajeModalRepresenVisualPorIndicador = $"Error al cargar datos: {ex.Message}";
    }
}

private async Task ObtenerRelacionesRepresenVisual(string indicadorId)
{
    try 
    {
        var todasLasRelaciones = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA_REPRESENVISUAL_INDICADOR) ?? new();
        relacionesRepresenVisual = todasLasRelaciones
            .Where(r => r["fkidindicador"].ToString() == indicadorId)
            .ToList();
    }
    catch (Exception ex)
    {
        mensajeModalRepresenVisualPorIndicador = $"Error al cargar relaciones: {ex.Message}";
    }
}

private async Task AsignarRepresenVisualPorIndicador()
{
    mensajeModalRepresenVisualPorIndicador = string.Empty;

    if (string.IsNullOrWhiteSpace(nuevoIdRepresenVisualPorIndicador))
    {
        mensajeModalRepresenVisualPorIndicador = "Debe seleccionar una representación visual.";
        return;
    }

    if (relacionesRepresenVisual.Any(r => 
        r["fkidrepresenvisual"].ToString() == nuevoIdRepresenVisualPorIndicador))
    {
        mensajeModalRepresenVisualPorIndicador = "La relación ya existe.";
        return;
    }

    var parametros = new Dictionary<string, object>
    {
        { "nombreSP", "sp_insertar_represenvisualporindicador" },
        { "fkidindicador", int.Parse(indicadorSeleccionado["id"].ToString()) },
        { "fkidrepresenvisual", int.Parse(nuevoIdRepresenVisualPorIndicador) }
    };

    var resultado = await servicioEntidad.EjecutarProcedimientoAsync(
        PROYECTO, 
        TABLA_REPRESENVISUAL_INDICADOR,
        "sp_insertar_represenvisualporindicador", 
        parametros
    );

    if (resultado != null)
    {
        mensajeModalRepresenVisualPorIndicador = "Relación creada correctamente.";
        nuevoIdRepresenVisualPorIndicador = string.Empty;
        await ObtenerRelacionesRepresenVisual(indicadorSeleccionado["id"].ToString());
    }
    else
    {
        mensajeModalRepresenVisualPorIndicador = "Error al crear la relación.";
    }
}

private async Task EliminarRepresenVisualPorIndicador(Dictionary<string, object> relacion)
{
    bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm",
        $"¿Desea eliminar esta representación visual del indicador?");

    if (!confirmar) return;

    var parametros = new Dictionary<string, object>
    {
        { "nombreSP", "sp_eliminar_represenvisualporindicador" },
        { "fkidindicador", int.Parse(relacion["fkidindicador"].ToString()) },
        { "fkidrepresenvisual", int.Parse(relacion["fkidrepresenvisual"].ToString()) }
    };

    var resultado = await servicioEntidad.EjecutarProcedimientoAsync(
        PROYECTO,
        TABLA_REPRESENVISUAL_INDICADOR,
        "sp_eliminar_represenvisualporindicador",
        parametros
    );

    if (resultado != null)
    {
        mensajeModalRepresenVisualPorIndicador = "Relación eliminada correctamente.";
        await ObtenerRelacionesRepresenVisual(indicadorSeleccionado["id"].ToString());
    }
    else
    {
        mensajeModalRepresenVisualPorIndicador = "Error al eliminar la relación.";
    }
}

private void CerrarModalRepresenVisualPorIndicador()
{
    mostrarModalRepresenVisualPorIndicador = false;
    indicadorSeleccionado = null;
    relacionesRepresenVisual.Clear();
}

//metodos para fuentes por indicador
private async Task AbrirModalFuentesPorIndicador(Dictionary<string, object> indicador)
{
    indicadorSeleccionado = indicador;
    mostrarModalFuentesPorIndicador = true;
    mensajeModalFuentesPorIndicador = "";
    nuevoIdFuente = "";
    
    try
    {
        fuentes = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "fuente") ?? new();
        await ObtenerRelacionesFuentes(indicador["id"].ToString());
    }
    catch (Exception ex)
    {
        mensajeModalFuentesPorIndicador = $"Error al cargar datos: {ex.Message}";
    }
}

private async Task ObtenerRelacionesFuentes(string indicadorId)
{
    try 
    {
        var todasLasRelaciones = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA_FUENTES_INDICADOR) ?? new();
        relacionesFuentes = todasLasRelaciones
            .Where(r => r["fkidindicador"].ToString() == indicadorId)
            .ToList();
    }
    catch (Exception ex)
    {
        mensajeModalFuentesPorIndicador = $"Error al cargar relaciones: {ex.Message}";
    }
}

private async Task AsignarFuentePorIndicador()
{
    mensajeModalFuentesPorIndicador = string.Empty;

    if (string.IsNullOrWhiteSpace(nuevoIdFuente))
    {
        mensajeModalFuentesPorIndicador = "Debe seleccionar una fuente.";
        return;
    }

    if (relacionesFuentes.Any(r => 
        r["fkidfuente"].ToString() == nuevoIdFuente))
    {
        mensajeModalFuentesPorIndicador = "La relación ya existe.";
        return;
    }

    var parametros = new Dictionary<string, object>
    {
        { "nombreSP", "sp_insertar_fuentesporindicador" },
        { "fkidfuente", int.Parse(nuevoIdFuente) },
        { "fkidindicador", int.Parse(indicadorSeleccionado["id"].ToString()) }
    };

    var resultado = await servicioEntidad.EjecutarProcedimientoAsync(
        PROYECTO, 
        TABLA_FUENTES_INDICADOR,
        "sp_insertar_fuentesporindicador", 
        parametros
    );

    if (resultado != null)
    {
        mensajeModalFuentesPorIndicador = "Fuente asignada correctamente.";
        nuevoIdFuente = string.Empty;
        await ObtenerRelacionesFuentes(indicadorSeleccionado["id"].ToString());
    }
    else
    {
        mensajeModalFuentesPorIndicador = "Error al asignar la fuente.";
    }
}

private async Task EliminarFuentePorIndicador(Dictionary<string, object> relacion)
{
    bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm",
        $"¿Desea eliminar esta fuente del indicador?");

    if (!confirmar) return;

    var parametros = new Dictionary<string, object>
    {
        { "nombreSP", "sp_eliminar_fuentesporindicador" },
        { "fkidfuente", int.Parse(relacion["fkidfuente"].ToString()) },
        { "fkidindicador", int.Parse(relacion["fkidindicador"].ToString()) }
    };

    var resultado = await servicioEntidad.EjecutarProcedimientoAsync(
        PROYECTO,
        TABLA_FUENTES_INDICADOR,
        "sp_eliminar_fuentesporindicador",
        parametros
    );

    if (resultado != null)
    {
        mensajeModalFuentesPorIndicador = "Fuente eliminada correctamente.";
        await ObtenerRelacionesFuentes(indicadorSeleccionado["id"].ToString());
    }
    else
    {
        mensajeModalFuentesPorIndicador = "Error al eliminar la fuente.";
    }
}

private void CerrarModalFuentesPorIndicador()
{
    mostrarModalFuentesPorIndicador = false;
    indicadorSeleccionado = null;
    relacionesFuentes.Clear();
}
}

