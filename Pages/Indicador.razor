@page "/indicador"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JSRuntime

<h3>Gestión de Indicadores</h3>

@if (!datosCargados)
{
    <p class="text-muted">Cargando información...</p>
}
else if (!string.IsNullOrEmpty(errorMensaje))
{
    <div class="alert alert-danger">@errorMensaje</div>
}
else
{
    <div class="mb-3 row g-2">
        <div class="col"><input @bind="nuevoCodigo" class="form-control" placeholder="Código" /></div>
        <div class="col"><input @bind="nuevoNombre" class="form-control" placeholder="Nombre" /></div>
        <div class="col"><input @bind="nuevoMeta" class="form-control" placeholder="Meta" /></div>
        <div class="col"><textarea @bind="nuevoObjetivo" class="form-control" placeholder="Objetivo"></textarea></div>
        <div class="col"><textarea @bind="nuevoAlcance" class="form-control" placeholder="Alcance"></textarea></div>
        <div class="col"><textarea @bind="nuevoFormula" class="form-control" placeholder="Fórmula"></textarea></div>

        <div class="col">
            <select @bind="nuevoTipoIndicador" class="form-select">
                <option value="">Tipo</option>
                @foreach (var tipo in tiposIndicador)
                {
                    <option value="@tipo["id"]">@tipo["nombre"]</option>
                }
            </select>
        </div>
        <div class="col">
            <select @bind="nuevaUnidadMedicion" class="form-select">
                <option value="">Unidad</option>
                @foreach (var unidad in unidadesMedicion)
                {
                    <option value="@unidad["id"]">@unidad["descripcion"]</option>
                }
            </select>
        </div>
        <div class="col">
            <select @bind="nuevoSentido" class="form-select">
                <option value="">Sentido</option>
                @foreach (var sentido in sentidos)
                {
                    <option value="@sentido["id"]">@sentido["nombre"]</option>
                }
            </select>
        </div>
        <div class="col">
            <select @bind="nuevaFrecuencia" class="form-select">
                <option value="">Frecuencia</option>
                @foreach (var frecuencia in frecuencias)
                {
                    <option value="@frecuencia["id"]">@frecuencia["nombre"]</option>
                }
            </select>
        </div>
        <div class="col">
            <select @bind="nuevoArticulo" class="form-select">
                <option value="">Artículo</option>
                @foreach (var articulo in articulos)
                {
                    <option value="@articulo["id"]">@articulo["nombre"]</option>
                }
            </select>
        </div>
        <div class="col">
            <select @bind="nuevoLiteral" class="form-select">
                <option value="">Literal</option>
                @foreach (var literal in literales)
                {
                    <option value="@literal["id"]">@literal["descripcion"]</option>
                }
            </select>
        </div>
        <div class="col">
            <select @bind="nuevoNumeral" class="form-select">
                <option value="">Numeral</option>
                @foreach (var numeral in numerales)
                {
                    <option value="@numeral["id"]">@numeral["descripcion"]</option>
                }
            </select>
        </div>
        <div class="col">
            <select @bind="nuevoParagrafo" class="form-select">
                <option value="">Parágrafo</option>
                @foreach (var paragrafo in parrafos)
                {
                    <option value="@paragrafo["id"]">@paragrafo["descripcion"]</option>
                }
            </select>
        </div>
        <div class="col">
            <button class="btn btn-success w-100" @onclick="CrearIndicador">Crear</button>
        </div>
    </div>

    @if (indicadores.Count == 0)
    {
        <p>No hay indicadores registrados.</p>
    }
    else
    {
        <table class="table table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Código</th>
                    <th>Nombre</th>
                    <th>Meta</th>
                    <th>Objetivo</th>
                    <th>Alcance</th>
                    <th>Fórmula</th>
                    <th>Tipo</th>
                    <th>Unidad</th>
                    <th>Sentido</th>
                    <th>Frecuencia</th>
                    <th>Artículo</th>
                    <th>Literal</th>
                    <th>Numeral</th>
                    <th>Parágrafo</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var indicador in indicadores)
                {
                    <tr>
                       @if (indicadorEditarId == indicador["id"].ToString())
                    {
                        <td><input class="form-control" @bind="indicadorEditarCodigo" /></td>
                        <td><input class="form-control" @bind="indicadorEditarNombre" /></td>
                        <td><input class="form-control" @bind="indicadorEditarMeta" /></td>
                        <td><textarea class="form-control" @bind="indicadorEditarObjetivo"></textarea></td>
                        <td><textarea class="form-control" @bind="indicadorEditarAlcance"></textarea></td>
                        <td><textarea class="form-control" @bind="indicadorEditarFormula"></textarea></td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarTipo">
                                <option value="">Tipo</option>
                                @foreach (var tipo in tiposIndicador)
                                {
                                    <option value="@tipo["id"]">@tipo["nombre"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarUnidad">
                                <option value="">Unidad</option>
                                @foreach (var unidad in unidadesMedicion)
                                {
                                    <option value="@unidad["id"]">@unidad["descripcion"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarSentido">
                                <option value="">Sentido</option>
                                @foreach (var sentido in sentidos)
                                {
                                    <option value="@sentido["id"]">@sentido["nombre"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarFrecuencia">
                                <option value="">Frecuencia</option>
                                @foreach (var frecuencia in frecuencias)
                                {
                                    <option value="@frecuencia["id"]">@frecuencia["nombre"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarArticulo">
                                <option value="">Artículo</option>
                                @foreach (var articulo in articulos)
                                {
                                    <option value="@articulo["id"]">@articulo["nombre"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarLiteral">
                                <option value="">Literal</option>
                                @foreach (var literal in literales)
                                {
                                    <option value="@literal["id"]">@literal["descripcion"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarNumeral">
                                <option value="">Numeral</option>
                                @foreach (var numeral in numerales)
                                {
                                    <option value="@numeral["id"]">@numeral["descripcion"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-select" @bind="indicadorEditarParagrafo">
                                <option value="">Parágrafo</option>
                                @foreach (var paragrafo in parrafos)
                                {
                                    <option value="@paragrafo["id"]">@paragrafo["descripcion"]</option>
                                }
                            </select>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-success" @onclick="GuardarEdicion">Guardar</button>
                            <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
                        </td>
                    }
                    else
                    {
                        <td>@indicador["codigo"]</td>
                        <td>@indicador["nombre"]</td>
                        <td>@indicador["meta"]</td>
                        <td>@indicador["objetivo"]</td>
                        <td>@indicador["alcance"]</td>
                        <td>@indicador["formula"]</td>
                        <td>@BuscarNombre(tiposIndicador, indicador["fkidtipoindicador"])</td>
                        <td>@BuscarDescripcion(unidadesMedicion, indicador["fkidunidadmedicion"])</td>
                        <td>@BuscarNombre(sentidos, indicador["fkidsentido"])</td>
                        <td>@BuscarNombre(frecuencias, indicador["fkidfrecuencia"])</td>
                        <td>@(BuscarNombre(articulos, indicador["fkidarticulo"]) ?? indicador["fkidarticulo"])</td>
                        <td>@BuscarDescripcion(literales, indicador["fkidliteral"])</td>
                        <td>@BuscarDescripcion(numerales, indicador["fkidnumeral"])</td>
                        <td>@BuscarDescripcion(parrafos, indicador["fkidparagrafo"])</td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="() => IniciarEdicion(indicador)">Editar</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => EliminarIndicador(indicador)">Eliminar</button>
        </td>
    }
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private const string PROYECTO = "proyecto";
    private const string TABLA = "indicador";

    private List<Dictionary<string, object>> indicadores = new();
    private List<Dictionary<string, object>> tiposIndicador = new();
    private List<Dictionary<string, object>> unidadesMedicion = new();
    private List<Dictionary<string, object>> sentidos = new();
    private List<Dictionary<string, object>> frecuencias = new();
    private List<Dictionary<string, object>> articulos = new();
    private List<Dictionary<string, object>> literales = new();
    private List<Dictionary<string, object>> numerales = new();
    private List<Dictionary<string, object>> parrafos = new();

    private string nuevoCodigo = "";
    private string nuevoNombre = "";
    private string nuevoMeta = "";
    private string nuevoObjetivo = "";
    private string nuevoAlcance = "";
    private string nuevoFormula = "";
    private string nuevoTipoIndicador = "";
    private string nuevaUnidadMedicion = "";
    private string nuevoSentido = "";
    private string nuevaFrecuencia = "";
    private string nuevoArticulo = "";
    private string nuevoLiteral = "";
    private string nuevoNumeral = "";
    private string nuevoParagrafo = "";
    private string indicadorEditarId = "";
    private string indicadorEditarCodigo = "";
    private string indicadorEditarNombre = "";
    private string indicadorEditarMeta = "";
    private string indicadorEditarObjetivo = "";
    private string indicadorEditarAlcance = "";
    private string indicadorEditarFormula = "";
    private string indicadorEditarTipo = "";
    private string indicadorEditarUnidad = "";
    private string indicadorEditarSentido = "";
    private string indicadorEditarFrecuencia = "";
    private string indicadorEditarArticulo = "";
    private string indicadorEditarLiteral = "";
    private string indicadorEditarNumeral = "";
    private string indicadorEditarParagrafo = "";


    private string? errorMensaje;
    private bool datosCargados = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
    }

    private async Task CargarDatosIniciales()
    {
        try
        {
            await CargarTabla("tipoindicador", tiposIndicador);
            await CargarTabla("unidadmedicion", unidadesMedicion);
            await CargarTabla("sentido", sentidos);
            await CargarTabla("frecuencia", frecuencias);
            await CargarTabla("articulo", articulos);
            await CargarTabla("literal", literales);
            await CargarTabla("numeral", numerales);
            await CargarTabla("paragrafo", parrafos);
            await ObtenerIndicadores();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar datos: {ex.Message}";
        }

        datosCargados = true;
    }

    private async Task CargarTabla(string nombreTabla, List<Dictionary<string, object>> lista)
    {
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, nombreTabla);
            if (resultado != null)
            {
                lista.Clear();
                lista.AddRange(resultado);
                await JSRuntime.InvokeVoidAsync("console.log", $"{nombreTabla} desde API:", JsonSerializer.Serialize(resultado));
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error en tabla {nombreTabla}: {ex.Message}";
        }
    }

    private async Task ObtenerIndicadores()
    {
        var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
        indicadores = resultado ?? new();
        await JSRuntime.InvokeVoidAsync("console.log", "Indicadores cargados:", JsonSerializer.Serialize(indicadores));
    }

    private string BuscarNombre(List<Dictionary<string, object>> lista, object? id)
    {
        var sid = id?.ToString();
        return lista.FirstOrDefault(e => e["id"]?.ToString() == sid)?["nombre"]?.ToString() ?? "N/A";
    }

    private string BuscarDescripcion(List<Dictionary<string, object>> lista, object? id)
    {
        return lista.FirstOrDefault(e => e["id"].ToString() == id?.ToString())?["descripcion"]?.ToString() ?? "N/A";
    }

    private async Task CrearIndicador()
    {
        var nuevo = new Dictionary<string, object>
        {
            { "codigo", nuevoCodigo },
            { "nombre", nuevoNombre },
            { "meta", nuevoMeta },
            { "objetivo", nuevoObjetivo },
            { "alcance", nuevoAlcance },
            { "formula", nuevoFormula },
            { "fkidtipoindicador", nuevoTipoIndicador },
            { "fkidunidadmedicion", nuevaUnidadMedicion },
            { "fkidsentido", nuevoSentido },
            { "fkidfrecuencia", nuevaFrecuencia },
            { "fkidarticulo", nuevoArticulo },
            { "fkidliteral", nuevoLiteral },
            { "fkidnumeral", nuevoNumeral },
            { "fkidparagrafo", nuevoParagrafo }
        };

        var creado = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevo);
        if (creado)
        {
            await ObtenerIndicadores();
            LimpiarFormulario();
        }
        else
        {
            errorMensaje = "Error al crear el indicador.";
        }
    }

    private void IniciarEdicion(Dictionary<string, object> indicador)
    {
        indicadorEditarId = indicador["id"].ToString();
        indicadorEditarCodigo = indicador["codigo"]?.ToString() ?? "";
        indicadorEditarNombre = indicador["nombre"]?.ToString() ?? "";
        indicadorEditarMeta = indicador["meta"]?.ToString() ?? "";
        indicadorEditarObjetivo = indicador["objetivo"]?.ToString() ?? "";
        indicadorEditarAlcance = indicador["alcance"]?.ToString() ?? "";
        indicadorEditarFormula = indicador["formula"]?.ToString() ?? "";
        indicadorEditarTipo = indicador["fkidtipoindicador"]?.ToString() ?? "";
        indicadorEditarUnidad = indicador["fkidunidadmedicion"]?.ToString() ?? "";
        indicadorEditarSentido = indicador["fkidsentido"]?.ToString() ?? "";
        indicadorEditarFrecuencia = indicador["fkidfrecuencia"]?.ToString() ?? "";
        indicadorEditarArticulo = indicador["fkidarticulo"]?.ToString() ?? "";
        indicadorEditarLiteral = indicador["fkidliteral"]?.ToString() ?? "";
        indicadorEditarNumeral = indicador["fkidnumeral"]?.ToString() ?? "";
        indicadorEditarParagrafo = indicador["fkidparagrafo"]?.ToString() ?? "";
    }

    private void CancelarEdicion()
    {
        indicadorEditarId = "";
    }

    private async Task GuardarEdicion()
    {
        if (string.IsNullOrEmpty(indicadorEditarId)) return;

        var datosActualizados = new Dictionary<string, object>
        {
            { "codigo", indicadorEditarCodigo },
            { "nombre", indicadorEditarNombre },
            { "meta", indicadorEditarMeta },
            { "objetivo", indicadorEditarObjetivo },
            { "alcance", indicadorEditarAlcance },
            { "formula", indicadorEditarFormula },
            { "fkidtipoindicador", indicadorEditarTipo },
            { "fkidunidadmedicion", indicadorEditarUnidad },
            { "fkidsentido", indicadorEditarSentido },
            { "fkidfrecuencia", indicadorEditarFrecuencia },
            { "fkidarticulo", indicadorEditarArticulo },
            { "fkidliteral", indicadorEditarLiteral },
            { "fkidnumeral", indicadorEditarNumeral },
            { "fkidparagrafo", indicadorEditarParagrafo }
        };

        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Actualizando:", JsonSerializer.Serialize(datosActualizados));

            var resultado = await servicioEntidad.ActualizarAsync(
                PROYECTO,
                TABLA,
                "id",
                indicadorEditarId,
                datosActualizados
            );

            if (resultado)
            {
                indicadorEditarId = "";
                await ObtenerIndicadores();
            }
            else
            {
                errorMensaje = "Error al actualizar el indicador.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error crítico al guardar: {ex.Message}";
        }
    }

    private void LimpiarFormulario()
    {
        nuevoCodigo = "";
        nuevoNombre = "";
        nuevoMeta = "";
        nuevoObjetivo = "";
        nuevoAlcance = "";
        nuevoFormula = "";
        nuevoTipoIndicador = "";
        nuevaUnidadMedicion = "";
        nuevoSentido = "";
        nuevaFrecuencia = "";
        nuevoArticulo = "";
        nuevoLiteral = "";
        nuevoNumeral = "";
        nuevoParagrafo = "";
    }

    private async Task EliminarIndicador(Dictionary<string, object> indicador)
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Está seguro de eliminar el indicador '{indicador["nombre"]}'?");
        if (!confirmar) return;

        bool resultado = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", indicador["id"].ToString());

        if (resultado)
        {
            await ObtenerIndicadores();
        }
        else
        {
            errorMensaje = "Error al eliminar el indicador.";
        }
    }
}
