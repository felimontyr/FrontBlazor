@page "/indicador"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JSRuntime

<h3>Gestión de Indicadores</h3>

@if (!string.IsNullOrEmpty(errorMensaje))
{
    <div class="alert alert-danger">@errorMensaje</div>
}

<div class="mb-3">
    <div class="row g-2">
        <div class="col">
            <input @bind="nuevoIndicadorCodigo" class="form-control" placeholder="Código" />
        </div>
        <div class="col">
            <input @bind="nuevoIndicadorNombre" class="form-control" placeholder="Nombre" />
        </div>
        <div class="col">
            <input @bind="nuevoIndicadorMeta" class="form-control" placeholder="Meta" />
        </div>
        <div class="col">
            <select @bind="nuevoIndicadorTipo" class="form-select">
                <option value="">Tipo</option>
                @foreach (var tipo in tiposIndicador)
                {
                    <option value="@tipo["id"]">@tipo["nombre"]</option>
                }
            </select>
        </div>
        <div class="col">
            <select @bind="nuevoIndicadorUnidadMedicion" class="form-select">
                <option value="">Unidad</option>
                @foreach (var unidad in unidadesMedicion)
                {
                    <option value="@unidad["id"]">@unidad["nombre"]</option>
                }
            </select>
        </div>
        <div class="col">
            <select @bind="nuevoIndicadorSentido" class="form-select">
                <option value="">Sentido</option>
                @foreach (var sentido in sentidosIndicador)
                {
                    <option value="@sentido["id"]">@sentido["nombre"]</option>
                }
            </select>
        </div>
        <div class="col">
            <select @bind="nuevoIndicadorFrecuencia" class="form-select">
                <option value="">Frecuencia</option>
                @foreach (var frecuencia in frecuencias)
                {
                    <option value="@frecuencia["id"]">@frecuencia["nombre"]</option>
                }
            </select>
        </div>
    </div>

    <div class="row g-2 mt-2">
        <div class="col">
            <textarea @bind="nuevoIndicadorObjetivo" class="form-control" placeholder="Objetivo"></textarea>
        </div>
        <div class="col">
            <textarea @bind="nuevoIndicadorAlcance" class="form-control" placeholder="Alcance"></textarea>
        </div>
        <div class="col">
            <textarea @bind="nuevoIndicadorFormula" class="form-control" placeholder="Fórmula"></textarea>
        </div>
    </div>

    <div class="row g-2 mt-2">
        <div class="col">
            <input @bind="nuevoIndicadorArticulo" class="form-control" placeholder="Artículo" />
        </div>
        <div class="col">
            <input @bind="nuevoIndicadorLiteral" class="form-control" placeholder="Literal" />
        </div>
        <div class="col">
            <input @bind="nuevoIndicadorNumeral" class="form-control" placeholder="Numeral" />
        </div>
        <div class="col">
            <input @bind="nuevoIndicadorParagrafo" class="form-control" placeholder="Parágrafo" />
        </div>
        <div class="col">
            <button class="btn btn-success w-100" @onclick="CrearIndicador">Crear</button>
        </div>
    </div>
</div>

@if (indicadores.Count == 0)
{
    <p>No hay indicadores registrados.</p>
}
else
{
    <table class="table table-bordered table-hover mt-3">
        <thead class="table-dark">
            <tr>
                <th>Código</th>
                <th>Nombre</th>
                <th>Objetivo</th>
                <th>Alcance</th>
                <th>Fórmula</th>
                <th>Meta</th>
                <th>Tipo</th>
                <th>Unidad</th>
                <th>Sentido</th>
                <th>Frecuencia</th>
                <th>Artículo</th>
                <th>Literal</th>
                <th>Numeral</th>
                <th>Parágrafo</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var indicador in indicadores)
            {
                <tr>
                    <td>@indicador["codigo"]</td>
                    <td>@indicador["nombre"]</td>
                    <td>@indicador["objetivo"]</td>
                    <td>@indicador["alcance"]</td>
                    <td>@indicador["formula"]</td>
                    <td>@indicador["meta"]</td>
                    <td>@NombrePorId(tiposIndicador, indicador["fkidtipoindicador"])</td>
                    <td>@NombrePorId(unidadesMedicion, indicador["fkidunidadmedicion"])</td>
                    <td>@NombrePorId(sentidosIndicador, indicador["fkidsentido"])</td>
                    <td>@NombrePorId(frecuencias, indicador["fkidfrecuencia"])</td>
                    <td>@indicador["fkidarticulo"]</td>
                    <td>@indicador["fkidliteral"]</td>
                    <td>@indicador["fkidnumeral"]</td>
                    <td>@indicador["fkidparagrafo"]</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarIndicador(indicador)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private const string PROYECTO = "proyecto";
    private const string TABLA = "indicador";

    private List<Dictionary<string, object>> indicadores = new();
    private List<Dictionary<string, object>> tiposIndicador = new();
    private List<Dictionary<string, object>> unidadesMedicion = new();
    private List<Dictionary<string, object>> sentidosIndicador = new();
    private List<Dictionary<string, object>> frecuencias = new();

    private string nuevoIndicadorCodigo = string.Empty;
    private string nuevoIndicadorNombre = string.Empty;
    private string nuevoIndicadorObjetivo = string.Empty;
    private string nuevoIndicadorAlcance = string.Empty;
    private string nuevoIndicadorFormula = string.Empty;
    private string nuevoIndicadorTipo = string.Empty;
    private string nuevoIndicadorUnidadMedicion = string.Empty;
    private string nuevoIndicadorMeta = string.Empty;
    private string nuevoIndicadorSentido = string.Empty;
    private string nuevoIndicadorFrecuencia = string.Empty;
    private string nuevoIndicadorArticulo = string.Empty;
    private string nuevoIndicadorLiteral = string.Empty;
    private string nuevoIndicadorNumeral = string.Empty;
    private string nuevoIndicadorParagrafo = string.Empty;

    private string? errorMensaje;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            ObtenerDatos("tipoindicador", tiposIndicador),
            ObtenerDatos("unidadmedicion", unidadesMedicion),
            ObtenerDatos("sentido", sentidosIndicador),
            ObtenerDatos("frecuencia", frecuencias),
            ObtenerIndicadores()
        );
    }

    private async Task ObtenerDatos(string tabla, List<Dictionary<string, object>> lista)
    {
        var datos = await servicioEntidad.ObtenerTodosAsync(PROYECTO, tabla);
        if (datos != null)
        {
            lista.Clear();
            lista.AddRange(datos);
        }
    }

    private async Task ObtenerIndicadores()
    {
        indicadores = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA) ?? new();
    }

    private string NombrePorId(List<Dictionary<string, object>> lista, object id)
    {
        return lista.FirstOrDefault(d => d["id"].ToString() == id.ToString())?["nombre"]?.ToString() ?? "N/A";
    }

    private async Task CrearIndicador()
    {
        errorMensaje = null;

        if (string.IsNullOrWhiteSpace(nuevoIndicadorCodigo) || string.IsNullOrWhiteSpace(nuevoIndicadorNombre))
        {
            errorMensaje = "El código y nombre son obligatorios.";
            return;
        }

        var nuevo = new Dictionary<string, object>
        {
            { "codigo", nuevoIndicadorCodigo },
            { "nombre", nuevoIndicadorNombre },
            { "objetivo", nuevoIndicadorObjetivo },
            { "alcance", nuevoIndicadorAlcance },
            { "formula", nuevoIndicadorFormula },
            { "meta", nuevoIndicadorMeta },
            { "fkidtipoindicador", nuevoIndicadorTipo },
            { "fkidunidadmedicion", nuevoIndicadorUnidadMedicion },
            { "fkidsentido", nuevoIndicadorSentido },
            { "fkidfrecuencia", nuevoIndicadorFrecuencia },
            { "fkidarticulo", nuevoIndicadorArticulo },
            { "fkidliteral", nuevoIndicadorLiteral },
            { "fkidnumeral", nuevoIndicadorNumeral },
            { "fkidparagrafo", nuevoIndicadorParagrafo }
        };

        var creado = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevo);
        if (creado)
        {
            await ObtenerIndicadores();
            LimpiarFormulario();
        }
        else
        {
            errorMensaje = "No se pudo crear el indicador.";
        }
    }

    private void LimpiarFormulario()
    {
        nuevoIndicadorCodigo = string.Empty;
        nuevoIndicadorNombre = string.Empty;
        nuevoIndicadorObjetivo = string.Empty;
        nuevoIndicadorAlcance = string.Empty;
        nuevoIndicadorFormula = string.Empty;
        nuevoIndicadorTipo = string.Empty;
        nuevoIndicadorUnidadMedicion = string.Empty;
        nuevoIndicadorMeta = string.Empty;
        nuevoIndicadorSentido = string.Empty;
        nuevoIndicadorFrecuencia = string.Empty;
        nuevoIndicadorArticulo = string.Empty;
        nuevoIndicadorLiteral = string.Empty;
        nuevoIndicadorNumeral = string.Empty;
        nuevoIndicadorParagrafo = string.Empty;
    }

    private async Task EliminarIndicador(Dictionary<string, object> indicador)
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Eliminar el indicador '{indicador["nombre"]}'?");
        if (!confirmar) return;

        var eliminado = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "codigo", indicador["codigo"].ToString());

        if (eliminado)
        {
            await ObtenerIndicadores();
        }
        else
        {
            errorMensaje = "Error al eliminar el indicador.";
        }
    }
}
