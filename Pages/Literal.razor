@page "/literal"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JSRuntime
@inherits ValidacionAcceso
@using FrontBlazor.Components

<h3>Literales</h3>

@if (errorMensaje != null)
{
    <div class="alert alert-danger">@errorMensaje</div>
}

@if (cargando)
{
    <div class="text-center my-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p>Cargando literales...</p>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Descripción</th>
                    <th>Artículo</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var literal in literales)
                {
                    <tr>
                        <td>@literal["id"]</td>
                        <td>@ObtenerDescripcionLiteral(literal)</td>
                        <td>@ObtenerNombreArticulo(literal)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private const string PROYECTO = "proyecto";
    private const string TABLA = "literal";
    private List<Dictionary<string, object>> literales = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> articulos = new List<Dictionary<string, object>>();
    private string? errorMensaje = null;
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerArticulos();
        await ObtenerLiterales();
    }

    private async Task ObtenerArticulos()
    {
        try
        {
            articulos = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "articulo");
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar los artículos: {ex.Message}";
            articulos = new List<Dictionary<string, object>>();
        }
    }

    private async Task ObtenerLiterales()
    {
        cargando = true;
        StateHasChanged();
        
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            literales = resultado?.Count > 0 ? resultado : new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar los literales: {ex.Message}";
            literales = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private string ObtenerDescripcionLiteral(Dictionary<string, object> literal)
    {
        return literal.ContainsKey("descripcion") ? literal["descripcion"].ToString() : "Sin descripción";
    }

    private string ObtenerNombreArticulo(Dictionary<string, object> literal)
    {
        if (!literal.ContainsKey("fkidarticulo")) return "N/A";
        
        string idArticulo = literal["fkidarticulo"].ToString();
        if (string.IsNullOrEmpty(idArticulo)) return "N/A";

        var articulo = articulos.FirstOrDefault(a => a["id"].ToString() == idArticulo);
        return articulo != null ? 
            (articulo.ContainsKey("nombre") ? articulo["nombre"].ToString() : "Artículo desconocido") : 
            "Artículo no encontrado";
    }
}