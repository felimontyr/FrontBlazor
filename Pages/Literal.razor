@page "/literal"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JSRuntime
@inherits ValidacionAcceso


<h3>Literales</h3>

<div class="mb-3">
    <div class="row g-3">
        <div class="col-md-2">
            <input @bind="nuevoLiteralId" class="form-control" placeholder="ID" />
        </div>
        <div class="col-md-6">
            <input @bind="nuevoLiteralDescripcion" class="form-control" placeholder="Descripción" />
        </div>
        <div class="col-md-3">
            <select @bind="nuevoLiteralArticulo" class="form-select">
                <option value="">Seleccione artículo</option>
                @foreach (var articulo in articulos)
                {
                    <option value="@articulo["id"]">@articulo["nombre"]</option>
                }
            </select>
        </div>
        <div class="col-md-1">
            <button class="btn btn-success w-100" @onclick="CrearLiteral">
                <i class="fas fa-plus"></i> Crear
            </button>
        </div>
    </div>
</div>

@if (errorMensaje != null)
{
    <div class="alert alert-danger">@errorMensaje</div>
}

@if (cargando)
{
    <div class="text-center my-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p>Cargando literales...</p>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Descripción</th>
                    <th>Artículo</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var literal in literales)
                {
                    <tr>
                        @if (literalEditarId == literal["id"].ToString())
                        {
                            <td>
                                <input @bind="literalEditarId" class="form-control form-control-sm" disabled />
                            </td>
                            <td>
                                <input @bind="literalEditarDescripcion" class="form-control form-control-sm" />
                            </td>
                            <td>
                                <select @bind="literalEditarArticulo" class="form-select form-select-sm">
                                    <option value="">Seleccione artículo</option>
                                    @foreach (var articulo in articulos)
                                    {
                                        <option value="@articulo["id"]" selected="@(literalEditarArticulo == articulo["id"].ToString())">
                                            @articulo["nombre"]
                                        </option>
                                    }
                                </select>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-success me-1" @onclick="() => GuardarEdicion(literal)">
                                    <i class="fas fa-save"></i> Guardar
                                </button>
                                <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicion">
                                    <i class="fas fa-times"></i> Cancelar
                                </button>
                            </td>
                        }
                        else
                        {
                            <td>@literal["id"]</td>
                            <td>@ObtenerDescripcionLiteral(literal)</td>
                            <td>@ObtenerNombreArticulo(literal)</td>
                            <td>
                                <button class="btn btn-sm btn-primary me-1" @onclick="() => IniciarEdicion(literal)">
                                    <i class="fas fa-edit"></i> Editar
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => EliminarLiteral(literal)">
                                    <i class="fas fa-trash-alt"></i> Eliminar
                                </button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private const string PROYECTO = "proyecto";
    private const string TABLA = "literal";
    private List<Dictionary<string, object>> literales = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> articulos = new List<Dictionary<string, object>>();
    private string nuevoLiteralId = string.Empty;
    private string nuevoLiteralDescripcion = string.Empty;
    private string nuevoLiteralArticulo = string.Empty;
    private string literalEditarId = string.Empty;
    private string literalEditarDescripcion = string.Empty;
    private string literalEditarArticulo = string.Empty;
    private string? errorMensaje = null;
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerArticulos();
        await ObtenerLiterales();
    }

    private async Task ObtenerArticulos()
    {
        try
        {
            articulos = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "articulo");
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar los artículos: {ex.Message}";
            articulos = new List<Dictionary<string, object>>();
        }
    }

    private async Task ObtenerLiterales()
    {
        cargando = true;
        StateHasChanged();
        
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            literales = resultado?.Count > 0 ? resultado : new List<Dictionary<string, object>>();
            
            // Asegurar que cada literal tenga las claves requeridas
            foreach (var literal in literales)
            {
                if (!literal.ContainsKey("descripcion")) literal["descripcion"] = "";
                if (!literal.ContainsKey("fkidarticulo")) literal["fkidarticulo"] = "";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar los literales: {ex.Message}";
            literales = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task CrearLiteral()
    {
        if (string.IsNullOrWhiteSpace(nuevoLiteralId))
        {
            errorMensaje = "El ID es requerido";
            return;
        }

        errorMensaje = null;

        try
        {
            var nuevoLiteral = new Dictionary<string, object>
            {
                { "id", nuevoLiteralId },
                { "descripcion", nuevoLiteralDescripcion },
                { "fkidarticulo", nuevoLiteralArticulo }
            };

            bool resultado = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevoLiteral);
            
            if (resultado)
            {
                nuevoLiteralId = string.Empty;
                nuevoLiteralDescripcion = string.Empty;
                nuevoLiteralArticulo = string.Empty;
                await ObtenerLiterales();
            }
            else
            {
                errorMensaje = "Error al crear el literal. Intente nuevamente.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error crítico: {ex.Message}";
        }
    }

    private void IniciarEdicion(Dictionary<string, object> literal)
    {
        literalEditarId = literal["id"].ToString();
        literalEditarDescripcion = literal.ContainsKey("descripcion") ? literal["descripcion"].ToString() : "";
        literalEditarArticulo = literal.ContainsKey("fkidarticulo") ? literal["fkidarticulo"].ToString() : "";
    }

    private void CancelarEdicion()
    {
        literalEditarId = string.Empty;
        literalEditarDescripcion = string.Empty;
        literalEditarArticulo = string.Empty;
    }

    private async Task GuardarEdicion(Dictionary<string, object> literal)
    {
        try
        {
            var literalActualizado = new Dictionary<string, object>
            {
                { "descripcion", literalEditarDescripcion },
                { "fkidarticulo", literalEditarArticulo }
            };

            bool resultado = await servicioEntidad.ActualizarAsync(
                PROYECTO, 
                TABLA, 
                "id", 
                literal["id"].ToString(), 
                literalActualizado
            );

            if (resultado)
            {
                await ObtenerLiterales();
                CancelarEdicion();
            }
            else
            {
                errorMensaje = "Error al actualizar el literal.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error de actualización: {ex.Message}";
        }
    }

    private async Task EliminarLiteral(Dictionary<string, object> literal)
{
    bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", 
        $"¿Está seguro de eliminar el literal '{ObtenerDescripcionLiteral(literal)}'?");
    
    if (!confirmar) return;

    try
    {
        // Primero eliminar registros relacionados en indicador
        bool relacionesEliminadas = await servicioEntidad.EliminarAsync(
            PROYECTO, 
            "indicador", 
            "fkidliteral", 
            literal["id"]?.ToString() ?? string.Empty
        );

        if (!relacionesEliminadas)
        {
            errorMensaje = "No se pudieron eliminar las relaciones del literal.";
            return;
        }

        // Luego eliminar el literal
        bool resultado = await servicioEntidad.EliminarAsync(
            PROYECTO, 
            TABLA, 
            "id", 
            literal["id"]?.ToString() ?? string.Empty
        );

        if (resultado)
        {
            await ObtenerLiterales();
        }
        else
        {
            errorMensaje = "Error al eliminar el literal después de eliminar sus relaciones.";
        }
    }
    catch (Exception ex)
    {
        errorMensaje = $"Error de eliminación: {ex.Message}";
    }
}

    private string ObtenerDescripcionLiteral(Dictionary<string, object> literal)
    {
        return literal.ContainsKey("descripcion") ? literal["descripcion"].ToString() : "Sin descripción";
    }

    private string ObtenerNombreArticulo(Dictionary<string, object> literal)
    {
        if (!literal.ContainsKey("fkidarticulo")) return "N/A";
        
        string idArticulo = literal["fkidarticulo"].ToString();
        if (string.IsNullOrEmpty(idArticulo)) return "N/A";

        var articulo = articulos.FirstOrDefault(a => a["id"].ToString() == idArticulo);
        return articulo != null ? 
            (articulo.ContainsKey("nombre") ? articulo["nombre"].ToString() : "Artículo desconocido") : 
            "Artículo no encontrado";
    }
}