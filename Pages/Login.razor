@page "/login" 
@using System.Net.Http.Json 
@inject HttpClient Http 
@inject NavigationManager Navigation 
@inject IJSRuntime JSRuntime 
@inherits FrontBlazor.Services.ValidacionAcceso
@using System.Text.Json


<!-- Sección de diseño de la página de login -->
<section class="vh-100">
  <div class="container-fluid h-custom">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <!-- Imagen ilustrativa del formulario de login -->
      <div class="col-md-9 col-lg-6 col-xl-5">
        <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp"
          class="img-fluid" alt="Sample image">
      </div>
      
      <!-- Formulario de login con Blazor -->
      <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
        <EditForm Model="@modeloLogin" OnValidSubmit="ManejarLogin">
          <!-- Inicia el formulario de login usando EditForm -->
          
          <!-- Botones de inicio de sesión externos (por ejemplo, redes sociales) -->
          <div class="d-flex flex-row align-items-center justify-content-center justify-content-lg-start">
            <p class="lead fw-normal mb-0 me-3">Sign in with</p>
            <button type="button" class="btn btn-primary btn-floating mx-1">
              <i class="fab fa-facebook-f"></i>
            </button>
            <button type="button" class="btn btn-primary btn-floating mx-1">
              <i class="fab fa-twitter"></i>
            </button>
            <button type="button" class="btn btn-primary btn-floating mx-1">
              <i class="fab fa-linkedin-in"></i>
            </button>
          </div>

          <!-- Divisor visual -->
          <div class="divider d-flex align-items-center my-4">
            <p class="text-center fw-bold mx-3 mb-0">Or</p>
          </div>

          <!-- Campo de entrada para el correo electrónico -->
          <div class="form-outline mb-4">
            <InputText id="form3Example3" class="form-control form-control-lg" 
                       @bind-Value="modeloLogin.Correo" placeholder="Enter a valid email address" />
            <label class="form-label" for="form3Example3">Email address</label>
            <ValidationMessage For="@(() => modeloLogin.Correo)" />
          </div>

          <!-- Campo de entrada para la contraseña -->
          <div class="form-outline mb-3">
            <InputText id="form3Example4" type="password" class="form-control form-control-lg" 
                       @bind-Value="modeloLogin.Contrasena" placeholder="Enter password" />
            <label class="form-label" for="form3Example4">Password</label>
            <ValidationMessage For="@(() => modeloLogin.Contrasena)" />
          </div>

          <!-- Botón de envío del formulario -->
          <div class="text-center text-lg-start mt-4 pt-2">
            <button type="submit" class="btn btn-primary btn-lg" 
                    style="padding-left: 2.5rem; padding-right: 2.5rem;">Login</button>
          </div>
        </EditForm>
      </div>
    </div>
  </div>
</section>

@code {
    // Crear el modelo de datos para almacenar el correo electrónico y la contraseña ingresados
    private ModeloLogin modeloLogin = new ModeloLogin();

    /// <summary>
    /// Manejar el proceso de login cuando el formulario se envía de manera válida.
    /// </summary>
 private async Task ManejarLogin()
{
    try
    {
        var datosVerificar = new Dictionary<string, string>
        {
            { "campoUsuario", "email" },
            { "campoContrasena", "contrasena" },
            { "valorUsuario", modeloLogin.Correo },
            { "valorContrasena", modeloLogin.Contrasena }
        };

        var respuestaVerificar = await Http.PostAsJsonAsync(
            "http://localhost:5266/api/proyecto/usuario/verificar-contrasena",
            datosVerificar
        );

        if (respuestaVerificar.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Login exitoso.");

            var jsonConsultaRoles = new
            {
                consulta = @"SELECT u.email AS EmailUsuario, r.nombre AS NombreRol 
                            FROM usuario u 
                            INNER JOIN rol_usuario ru ON u.email = ru.fkemail 
                            INNER JOIN rol r ON ru.fkidrol = r.id 
                            WHERE u.email = @EmailUsuario",
                parametros = new { EmailUsuario = modeloLogin.Correo }
            };

            var respuestaRoles = await Http.PostAsJsonAsync(
                "http://localhost:5266/api/proyecto/tabla/ejecutar-consulta-parametrizada",
                jsonConsultaRoles
            );

            if (respuestaRoles.IsSuccessStatusCode)
            {
                var listaRoles = await respuestaRoles.Content.ReadFromJsonAsync<List<Dictionary<string, object>>>();

                if (listaRoles != null && listaRoles.Any())
                {
                    await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "usuarioEmail", modeloLogin.Correo);

                    foreach (var rol in listaRoles)
                    {
                        if (rol.TryGetValue("NombreRol", out object? nombreRolObj) && nombreRolObj is not null)
                        {
                            var nombreRol = nombreRolObj.ToString();
                            if (!string.IsNullOrEmpty(nombreRol))
                            {
                                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", $"rol_{nombreRol}", nombreRol);

                                // Definir permisos según el rol
                                var permisos = nombreRol.ToLower() switch
                                {
                                    "admin" => new { crear = true, editar = true, leer = true, eliminar = true },
                                    "verificador" => new { crear = false, editar = true, leer = true, eliminar = false },
                                    "validador" => new { crear = true, editar = true, leer = true, eliminar = false },
                                    "invitado" => new { crear = false, editar = false, leer = true, eliminar = false },
                                    _ => new { crear = false, editar = false, leer = true, eliminar = false }
                                };

                                // Guardar permisos en sessionStorage
                                await JSRuntime.InvokeVoidAsync(
                                    "sessionStorage.setItem",
                                    $"permisos_{nombreRol}",
                                    JsonSerializer.Serialize(permisos)
                                );

                                // Consultar rutas del rol
                                var jsonConsultaRutas = new
                                {
                                    consulta = "SELECT Ruta FROM RutaRol WHERE Rol = @Rol",
                                    parametros = new { Rol = nombreRol }
                                };

                                var respuestaRutas = await Http.PostAsJsonAsync(
                                    "http://localhost:5266/api/proyecto/tabla/ejecutar-consulta-parametrizada",
                                    jsonConsultaRutas
                                );

                                if (respuestaRutas.IsSuccessStatusCode)
                                {
                                    var listaRutas = await respuestaRutas.Content
                                        .ReadFromJsonAsync<List<Dictionary<string, object>>>();

                                    if (listaRutas != null)
                                    {
                                        foreach (var ruta in listaRutas)
                                        {
                                            if (ruta.TryGetValue("Ruta", out object? nombreRutaObj) && 
                                                nombreRutaObj is not null)
                                            {
                                                var nombreRuta = nombreRutaObj.ToString();
                                                if (!string.IsNullOrEmpty(nombreRuta))
                                                {
                                                    await JSRuntime.InvokeVoidAsync(
                                                        "sessionStorage.setItem",
                                                        $"ruta_{nombreRuta}",
                                                        nombreRuta
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    await JSRuntime.InvokeVoidAsync("alert", "Roles y permisos obtenidos exitosamente.");
                    Navigation.NavigateTo("/");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "No se encontraron roles para el usuario.");
                }
            }
            else
            {
                var errorContenido = await respuestaRoles.Content.ReadAsStringAsync();
                Console.WriteLine($"Error al obtener roles: {errorContenido}");
                await JSRuntime.InvokeVoidAsync("alert", "Error al obtener los roles del usuario.");
            }
        }
        else if (respuestaVerificar.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Usuario o contraseña incorrectos.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al iniciar sesión. Por favor, intente de nuevo.");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error en el proceso de login: {ex.Message}");
        await JSRuntime.InvokeVoidAsync("alert", $"Error inesperado: {ex.Message}");
    }
}

    /// <summary>
    /// Función auxiliar para comparar claves de rutas en sessionStorage.
    /// </summary>
    /// <param name="clave">Clave almacenada en sessionStorage.</param>
    /// <param name="ruta">Ruta que se desea comparar.</param>
    /// <returns>Verdadero si coinciden, falso en caso contrario.</returns>
    private bool sessionStorageKeyCoincide(string clave, string ruta)
    {
        // Comparar la clave formateada "ruta_" + nombre de ruta con ignorancia de mayúsculas/minúsculas
        return clave.Equals($"ruta_{ruta}", StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>
    /// Modelo de datos utilizado para capturar el correo y la contraseña ingresados por el usuario en el formulario de login.
    /// </summary>
    public class ModeloLogin
    {
        public string Correo { get; set; } = string.Empty;      // Campo para el correo electrónico
        public string Contrasena { get; set; } = string.Empty;  // Campo para la contraseña
    }
}
