@page "/Numeral"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JSRuntime

<h3>Numerales</h3>

<div class="mb-3">
    <div class="row g-3">
        <div class="col-md-2">
            <input @bind="nuevoNumeralId" class="form-control" placeholder="ID" />
        </div>
        <div class="col-md-6">
            <input @bind="nuevoNumeralDescripcion" class="form-control" placeholder="Descripción" />
        </div>
        <div class="col-md-3">
            <select @bind="nuevoNumeralLiteral" class="form-select">
                <option value="">Seleccione literal</option>
                @foreach (var literal in literales)
                {
                    <option value="@literal["id"]">@literal["descripcion"]</option>
                }
            </select>
        </div>
        <div class="col-md-1">
            <button class="btn btn-success w-100" @onclick="CrearNumeral">
                <i class="fas fa-plus"></i> Crear
            </button>
        </div>
    </div>
</div>

@if (errorMensaje != null)
{
    <div class="alert alert-danger">@errorMensaje</div>
}

@if (cargando)
{
    <div class="text-center my-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p>Cargando numerales...</p>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Descripción</th>
                    <th>Literal Asociado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var numeral in numerales)
                {
                    <tr>
                        @if (numeralEditarId == numeral["id"].ToString())
                        {
                            <td>
                                <input @bind="numeralEditarId" class="form-control form-control-sm" disabled />
                            </td>
                            <td>
                                <input @bind="numeralEditarDescripcion" class="form-control form-control-sm" />
                            </td>
                            <td>
                                <select @bind="numeralEditarLiteral" class="form-select form-select-sm">
                                    <option value="">Seleccione literal</option>
                                    @foreach (var literal in literales)
                                    {
                                        <option value="@literal["id"]" selected="@(numeralEditarLiteral == literal["id"].ToString())">
                                            @literal["descripcion"]
                                        </option>
                                    }
                                </select>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-success me-1" @onclick="() => GuardarEdicion(numeral)">
                                    <i class="fas fa-save"></i> Guardar
                                </button>
                                <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicion">
                                    <i class="fas fa-times"></i> Cancelar
                                </button>
                            </td>
                        }
                        else
                        {
                            <td>@numeral["id"]</td>
                            <td>@numeral["descripcion"]</td>
                            <td>@ObtenerDescripcionLiteral(numeral)</td>
                            <td>
                                <button class="btn btn-sm btn-primary me-1" @onclick="() => IniciarEdicion(numeral)">
                                    <i class="fas fa-edit"></i> Editar
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => EliminarNumeral(numeral)">
                                    <i class="fas fa-trash-alt"></i> Eliminar
                                </button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private const string PROYECTO = "proyecto";
    private const string TABLA = "numeral";
    private const string TABLA_LITERAL = "literal";

    private List<Dictionary<string, object>> numerales = new();
    private List<Dictionary<string, object>> literales = new();

    private string nuevoNumeralId = string.Empty;
    private string nuevoNumeralDescripcion = string.Empty;
    private string nuevoNumeralLiteral = string.Empty;

    private string numeralEditarId = string.Empty;
    private string numeralEditarDescripcion = string.Empty;
    private string numeralEditarLiteral = string.Empty;

    private string? errorMensaje = null;
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
    }

    private async Task CargarDatosIniciales()
{
    try
    {
        await Task.WhenAll(
            ObtenerLiterales(),
            ObtenerNumerales()
        );
    }
    catch (Exception ex)
    {
        errorMensaje = $"Error al cargar datos iniciales: {ex.Message}";
    }
    finally
    {
        cargando = false; // Asegúrate de que esto siempre se ejecute
        StateHasChanged(); // Actualiza la interfaz
    }
}

    private async Task ObtenerLiterales()
    {
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA_LITERAL);
            literales = resultado?.Count > 0 ? resultado : new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar literales: {ex.Message}";
        }
    }

    private async Task ObtenerNumerales()
    {
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            numerales = resultado?.Count > 0 ? resultado : new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar numerales: {ex.Message}";
        }
    }

    private async Task CrearNumeral()
    {
        if (string.IsNullOrWhiteSpace(nuevoNumeralId) || string.IsNullOrWhiteSpace(nuevoNumeralDescripcion) || string.IsNullOrWhiteSpace(nuevoNumeralLiteral))
        {
            errorMensaje = "Todos los campos son obligatorios.";
            return;
        }

        try
        {
            var nuevoNumeral = new Dictionary<string, object>
            {
                { "id", nuevoNumeralId },
                { "descripcion", nuevoNumeralDescripcion },
                { "fkidliteral", nuevoNumeralLiteral }
            };

            bool resultado = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevoNumeral);

            if (resultado)
            {
                nuevoNumeralId = string.Empty;
                nuevoNumeralDescripcion = string.Empty;
                nuevoNumeralLiteral = string.Empty;
                await ObtenerNumerales();
            }
            else
            {
                errorMensaje = "Error al crear el numeral.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al crear numeral: {ex.Message}";
        }
    }

    private void IniciarEdicion(Dictionary<string, object> numeral)
    {
        numeralEditarId = numeral["id"].ToString();
        numeralEditarDescripcion = numeral["descripcion"].ToString();
        numeralEditarLiteral = numeral["fkidliteral"].ToString();
    }

    private void CancelarEdicion()
    {
        numeralEditarId = string.Empty;
        numeralEditarDescripcion = string.Empty;
        numeralEditarLiteral = string.Empty;
    }

    private async Task GuardarEdicion(Dictionary<string, object> numeral)
    {
        if (string.IsNullOrWhiteSpace(numeralEditarDescripcion) || string.IsNullOrWhiteSpace(numeralEditarLiteral))
        {
            errorMensaje = "Todos los campos son obligatorios.";
            return;
        }

        try
        {
            var numeralActualizado = new Dictionary<string, object>
            {
                { "descripcion", numeralEditarDescripcion },
                { "fkidliteral", numeralEditarLiteral }
            };

            bool resultado = await servicioEntidad.ActualizarAsync(PROYECTO, TABLA, "id", numeral["id"].ToString(), numeralActualizado);

            if (resultado)
            {
                await ObtenerNumerales();
                CancelarEdicion();
            }
            else
            {
                errorMensaje = "Error al actualizar el numeral.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al actualizar numeral: {ex.Message}";
        }
    }

    private async Task EliminarNumeral(Dictionary<string, object> numeral)
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Está seguro de eliminar el numeral '{numeral["descripcion"]}'?");
        if (!confirmar) return;

        try
        {
            bool resultado = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", numeral["id"].ToString());

            if (resultado)
            {
                await ObtenerNumerales();
            }
            else
            {
                errorMensaje = "Error al eliminar el numeral.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al eliminar numeral: {ex.Message}";
        }
    }

    private string ObtenerDescripcionLiteral(Dictionary<string, object> numeral)
    {
        var literal = literales.FirstOrDefault(l => l["id"].ToString() == numeral["fkidliteral"].ToString());
        return literal != null ? literal["descripcion"].ToString() : "Literal no encontrado";
    }
}