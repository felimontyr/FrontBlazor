@page "/Variable"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JSRuntime
@inherits ValidacionAcceso


<h3>Variables</h3>

<div>
    <input @bind="nuevaVariableNombre" placeholder="Nombre de la variable" />
    <input type="date" @bind="nuevaVariableFecha" @bind:format="yyyy-MM-dd" />
    <select @bind="nuevaVariableUsuario">
        <option value="">Seleccione un usuario</option>
        @foreach (var usuario in usuarios)
        {
            <option value="@usuario["email"]">@usuario["email"]</option>
        }
    </select>
    <button class="btn-success" @onclick="CrearVariable">Crear</button>
</div>

@if (!string.IsNullOrEmpty(errorMensaje))
{
    <div style="color: red;">@errorMensaje</div>
}

<ul>
    @foreach (var variable in variables)
    {
        <li>
            @if (variableEditarId == variable["id"].ToString())
            {
                <input @bind="variableEditarNombre" placeholder="Nuevo nombre" />
                <input type="date" @bind="variableEditarFecha" @bind:format="yyyy-MM-dd" />
                <select @bind="variableEditarUsuario">
                    <option value="">Seleccione usuario</option>
                    @foreach (var usuario in usuarios)
                    {
                        <option value="@usuario["email"]" selected="@(variableEditarUsuario == usuario["email"].ToString())">
                            @usuario["email"]
                        </option>
                    }
                </select>
                <button class="btn-primary" @onclick="() => GuardarEdicion(variable)">Guardar</button>
                <button @onclick="CancelarEdicion">Cancelar</button>
            }
            else
            {
                <span>
                    @variable["nombre"] - Creado el: @FormatDate(variable["fechacreacion"]) -
                    Usuario: @(variable.ContainsKey("fkemailusuario") ? variable["fkemailusuario"] : "N/A")
                </span>
                <button class="btn-primary" @onclick="() => IniciarEdicion(variable)">Editar</button>
                <button class="btn btn-danger" @onclick="() => EliminarVariable(variable)">Eliminar</button>
            }
        </li>
    }
</ul>

@code {
    private const string PROYECTO = "proyecto";
    private const string TABLA = "variable";
    private List<Dictionary<string, object>> variables = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> usuarios = new List<Dictionary<string, object>>();
    private string nuevaVariableNombre = string.Empty;
    private DateTime nuevaVariableFecha = DateTime.Now;
    private string nuevaVariableUsuario = string.Empty;
    private string variableEditarId = string.Empty;
    private string variableEditarNombre = string.Empty;
    private DateTime variableEditarFecha = DateTime.Now;
    private string variableEditarUsuario = string.Empty;
    private string? errorMensaje = null;
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerUsuarios();
        await ObtenerVariables();
    }

    private string FormatDate(object dateObj)
    {
        if (dateObj == null || dateObj == DBNull.Value)
            return "N/A";

        if (dateObj is DateTime date)
            return date.ToShortDateString();

        if (DateTime.TryParse(dateObj.ToString(), out DateTime parsedDate))
            return parsedDate.ToShortDateString();

        return dateObj.ToString();
    }

    private async Task ObtenerUsuarios()
    {
        try
        {
            usuarios = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "usuario");
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar los usuarios: {ex.Message}";
        }
    }

    private async Task ObtenerVariables()
    {
        cargando = true;
        errorMensaje = null;

        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);

            variables = resultado ?? new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar las variables: {ex.Message}";
            variables = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CrearVariable()
    {
        errorMensaje = null;

        if (string.IsNullOrWhiteSpace(nuevaVariableNombre))
        {
            errorMensaje = "El nombre no puede estar vacío.";
            return;
        }

        if (string.IsNullOrWhiteSpace(nuevaVariableUsuario))
        {
            errorMensaje = "Debe seleccionar un usuario.";
            return;
        }

        var nuevaVariable = new Dictionary<string, object>
        {
            { "nombre", nuevaVariableNombre },
            { "fechacreacion", nuevaVariableFecha },
            { "fkemailusuario", nuevaVariableUsuario }
        };

        try
        {
            bool resultado = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevaVariable);
            if (resultado)
            {
                nuevaVariableNombre = string.Empty;
                nuevaVariableFecha = DateTime.Now;
                nuevaVariableUsuario = string.Empty;
                await ObtenerVariables();
            }
            else
            {
                errorMensaje = "Error al crear la variable.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error crítico: {ex.Message}";
        }
    }

    private void IniciarEdicion(Dictionary<string, object> variable)
    {
        variableEditarId = variable["id"].ToString();
        variableEditarNombre = variable["nombre"].ToString();

        if (variable["fechacreacion"] is DateTime fecha)
        {
            variableEditarFecha = fecha;
        }
        else if (DateTime.TryParse(variable["fechacreacion"]?.ToString(), out DateTime parsedDate))
        {
            variableEditarFecha = parsedDate;
        }

        variableEditarUsuario = variable.ContainsKey("fkemailusuario") ? variable["fkemailusuario"].ToString() : string.Empty;
    }

    private void CancelarEdicion()
    {
        variableEditarId = string.Empty;
        variableEditarNombre = string.Empty;
        variableEditarFecha = DateTime.Now;
        variableEditarUsuario = string.Empty;
    }

    private async Task GuardarEdicion(Dictionary<string, object> variable)
    {
        if (string.IsNullOrWhiteSpace(variableEditarNombre))
        {
            errorMensaje = "El nombre no puede estar vacío.";
            return;
        }

        if (string.IsNullOrWhiteSpace(variableEditarUsuario))
        {
            errorMensaje = "Debe seleccionar un usuario.";
            return;
        }

        var variableActualizada = new Dictionary<string, object>
        {
            { "nombre", variableEditarNombre },
            { "fechacreacion", variableEditarFecha },
            { "fkemailusuario", variableEditarUsuario }
        };

        try
        {
            bool resultado = await servicioEntidad.ActualizarAsync(PROYECTO, TABLA, "id", variable["id"].ToString(), variableActualizada);

            if (resultado)
            {
                await ObtenerVariables();
                CancelarEdicion();
            }
            else
            {
                errorMensaje = "Error al actualizar la variable.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error de actualización: {ex.Message}";
        }
    }

    private async Task EliminarVariable(Dictionary<string, object> variable)
    {
        bool confirmar = await JSRuntime.InvokeAsync<bool>("confirm",
            $"¿Estás seguro de eliminar la variable '{variable["nombre"]}'?");

        if (confirmar)
        {
            try
            {
                bool resultado = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", variable["id"].ToString());

                if (resultado)
                {
                    await ObtenerVariables();
                }
                else
                {
                    errorMensaje = "Error al eliminar la variable.";
                }
            }
            catch (Exception ex)
            {
                errorMensaje = $"Error de eliminación: {ex.Message}";
            }
        }
    }
}
